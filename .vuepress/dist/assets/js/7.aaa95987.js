(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{208:function(e,t,n){"use strict";n.r(t);var s=n(28),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),n("p",[e._v("The configuration file for Akceli is "),n("code",[e._v("config/akceli.php")])]),e._v(" "),n("h2",{attrs:{id:"environment-check"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#environment-check"}},[e._v("#")]),e._v(" Environment Check")]),e._v(" "),n("p",[e._v("This is what the initial part of "),n("code",[e._v("config/akceli.php")]),e._v(" looks like.")]),e._v(" "),n("div",{staticClass:"language-php extra-class"},[n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[n("span",{pre:!0,attrs:{class:"token php language-php"}},[n("span",{pre:!0,attrs:{class:"token delimiter important"}},[e._v("<?php")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("use")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token package"}},[e._v("Akceli"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("Akceli")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("use")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token package"}},[e._v("Akceli"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("Console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("use")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token package"}},[e._v("Illuminate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("Support"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("Str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n * This is here to prevent this from running in production\n */")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[e._v("'APP_ENV'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[e._v("'local'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),n("p",[e._v("This set to prevent the Akceli Generators from being active in production.  Do not remove this, you would not want\nAkceli Generators to be active in a production application.  It requires terminal access to work but better safe then sorry.")])]),e._v(" "),n("h2",{attrs:{id:"settings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#settings"}},[e._v("#")]),e._v(" Settings")]),e._v(" "),n("div",{staticClass:"language-php extra-class"},[n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[e._v("return [\n    /**\n     * Model Directory\n     *\n     *      Akceli has two ways that it can find a file Model\n     *\n     *          First:  Akceli will try to find a file with the $table attribute set to the same as your model.\n     *                  If that property is set, you will have no issues finding the correct file for your model.\n     *\n     *          Second: If the first lookup fails, Akceli will try to find a file with the Laravel naming conventions for the table,\n     *                  This can cause it to find a file that is not a model.  If all of your files are in a model directory\n     *                  Or you do not have Multiple Classes that are the same name as the Expected Model, then there will be no issues\n     *                  finding the correct file.\n     *\n     *          Note:  The possible failures of the second lookup is why Akceli models get generated with the $table property set.\n     *                 If your app uses the Models directory, I suggest you set it here.  It will speed up the Model lookups.\n     *                 To Insure that the model lookups always resolve correctly simply add the $table attribute to the models.\n     */\n    'model_directory' =>  'Models',\n\n    /**\n     * Options: 'auto-complete' or 'multiple-choice'\n     * will default to 'multiple-choice' if this is missing or set to an invalid option\n     *\n     * This controls how you chose your templates.\n     * (auto-complete): Is useful if you know what templates you have, you can just type the first few letters\n     *      of the template name and when it is selected just press enter.  When you do not know what your options are\n     *      you can simply press enter with nothing selected and it will switch to multiple-choice selection allowing\n     *      for you to see the full lis of templates you want.\n     */\n    'select-template-behavior' => 'auto-complete',\n\n    /**\n     * tables that will be skipped when using the Generate All Generator\n     */\n    'all-generator-blacklist' => [\n        'failed_jobs',\n        'migrations',\n        'password_resets',\n    ],\n\n    /**\n     * Generators that generate relationships\n     *\n     * If you have a generator that generates relationships, then add it here so that the all generator will flesh out the belongs to many\n     * Relationships during the process, example models.  So all relationships are added to the models.\n     */\n    'generators_that_generate_relationships' => ['model'],\n\n    /**\n     * This is for documenting what values you want to be show based on a given data type.\n     */\n    'column-settings' => [\n        /**\n         * Usage: "),n("span",{pre:!0,attrs:{class:"token php language-php"}},[n("span",{pre:!0,attrs:{class:"token delimiter important"}},[e._v("<?=")]),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$column")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("getColumnSetting")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[e._v("'php_class_doc_type'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[e._v("'string'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token delimiter important"}},[e._v("?>")])]),e._v("\n         *\n         * Outputs based on column analysis:\n         *    Integer: 'integer'\n         *    String: 'string'\n         *    Enum: 'string'\n         *    Timestamp: 'Carbon'\n         *    Boolean: 'boolean'\n         */\n        'php_class_doc_type' => Akceli::columnSetting('string', 'integer', 'string', 'string', 'Carbon', 'boolean'),\n\n        /**\n         * Usage: "),n("span",{pre:!0,attrs:{class:"token php language-php"}},[n("span",{pre:!0,attrs:{class:"token delimiter important"}},[e._v("<?=")]),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$column")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("getColumnSetting")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[e._v("'casts'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[e._v("'string'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token delimiter important"}},[e._v("?>")])]),e._v("\n         *\n         * Outputs based on column analysis:\n         *    Integer: null\n         *    String: null\n         *    Enum: null\n         *    Timestamp: 'datetime'\n         *    Boolean: 'boolean'\n         */\n        'casts' => Akceli::columnSetting(null, null, null, null, 'datetime', 'boolean'),\n    ],\n\n    /**\n     * This is where all the magic happens!!\n     *\n     * To create a new Generator: php artisan akceli:generate generator\n     * It will register the Generator in the following list for you and build out the boiler plate of the Generator class.\n     */\n    'generators' => [\n        'generator' => DefaultNewAkceliGenerator::class,\n        'all' => AllGenerator::class,\n        'channel' => ChannelGenerator::class,\n        'command' => CommandGenerator::class,\n        'controller' => ControllerGenerator::class,\n        'event' => EventGenerator::class,\n        'exception' => ExceptionGenerator::class,\n        'factory' => FactoryGenerator::class,\n        'job' => JobGenerator::class,\n        'listener' => ListenerGenerator::class,\n        'mailable' => MailableGenerator::class,\n        'middleware' => MiddlewareGenerator::class,\n        'migration' => MigrationGenerator::class,\n        'model' => ModelGenerator::class,\n        'notification' => NotificationGenerator::class,\n        'observer' => ObserverGenerator::class,\n        'policy' => PolicyGenerator::class,\n        'provider' => ProviderGenerator::class,\n        'request' => RequestGenerator::class,\n        'resource' => ResourceGenerator::class,\n        'rule' => RuleGenerator::class,\n        'test' => TestGenerator::class,\n        'seeder' => SeederGenerator::class,\n        /** New Generators Get Inserted Here */\n    ],\n\n    /**\n     * This mapping is used to build relationships\n     * Can be used to add custom relationship and build a Custom RelationshipBuilder\n     */\n    'relationships' => [\n        'belongsToMany' => BelongsToManyBuilder::class,\n        'belongsTo' => BelongsToBuilder::class,\n        'hasOne' => HasOneBuilder::class,\n        'hasMany' => HasManyBuilder::class,\n        'morphMany' => MorphManyBuilder::class,\n        'morphOne' => MorphOneBuilder::class,\n        'morphTo' => MorphToBuilder::class,\n//        'morphToMany' => MorphToManyBuilder::class,\n    ]\n];\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);